{"mappings":"oeAeA,IAAAA,EAAAC,EAAA,SAGA,IAAIC,EAIJ,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAdEQ,SAASC,cAAc,SAG/BC,iBAAiB,UAexB,SAAsBC,GACpBA,EAAIC,iBACJ,MAAQZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAIK,cAAcC,SAClD,IAAIC,EAAaC,OAAON,EAAMO,OAC9B,MAAMC,EAAYF,OAAOL,EAAKM,OACxBE,EAAeH,OAAOJ,EAAOK,OAEnC,IAAKvB,EAAe,EAAGA,GAAgByB,EAAczB,GAAgB,EACnEC,EAAcD,EAAcqB,GACzBK,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBL,EAAA6B,OAAOC,QAAQ,uBAAqB1B,QAAiBC,MAAU,IAEhE0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBL,EAAA6B,OAAOG,QAAQ,sBAAoB5B,QAAeC,MAAU,IAGhEkB,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["// В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в\n// миллисекундах, шаг увеличения задержки для каждого промиса после первого и количество\n// промисов которое необходимо создать.\n\n// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay)\n// столько раз, сколько ввели в поле amount.При каждом вызове передай ей номер создаваемого\n// промиса(position) и задержку учитывая введенную пользователем первую задержку(delay) и\n// шаг(step).\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который\n// выполянется или отклоняется через delay времени.Значением промиса должен быть объект,\n// в котором будут свойства position и delay со значениями одноименных параметров.\n// Используй начальный код функции для выбора того, что нужно сделать с промисом -\n// выполнить или отклонить.\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\nlet promisNumber;\n\nformEl.addEventListener('submit', onFormSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  const { delay, step, amount } = evt.currentTarget.elements;\n  let delayFirst = Number(delay.value);\n  const stepDelay = Number(step.value);\n  const amountNumber = Number(amount.value);\n\n  for (promisNumber = 1; promisNumber <= amountNumber; promisNumber += 1) {\n    createPromise(promisNumber, delayFirst)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delayFirst += stepDelay;\n  }\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$promisNumber","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","evt","preventDefault","delay1","step","amount","currentTarget","elements","delayFirst","Number","value","stepDelay","amountNumber","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.97b755d8.js.map"}